
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> 
> ## install and load libraries automatically
> # library (reshape)
> # library (ggplot2)
> if (!require("pacman")) install.packages ("pacman")
Loading required package: pacman
> pacman::p_load (reshape, ggplot2)
> 
> 
> source ('preamble.r')
[1] "$Id$"
> Source ('misc.r')
> Source ('map-to-genes.r')
[1] "$Id: c5c93e5e07937d314f21fb4f1a7615536a1d2728 $"
> 
> 
> profile.plot.top.n <- 25
> 
> 
> explore.correlations <- function (prefix, pome.gct.file, mrna.gct.file, group.cls, 
+                                   FDR=0.05, correlation.type='pearson') {
+   # explore gene (mrna) - protein correlation and sample-wise correlation between 
+   # mrna expression and protein expression
+   # any samples in the exclude vector (ala cls) are removed before correlation calcs/plots
+   # n.b: "pome" is used to repesent proteome or phosphoproteome
+   
+   # read cls and gct files
+   cls <- read.cls (group.cls)
+   pome <- read.gct2 (pome.gct.file, check.names=FALSE)
+   mrna <- read.gct2 (mrna.gct.file, check.names=FALSE)
+   common.cols <- intersect (colnames (pome), colnames (mrna))
+ 
+   adjust.columns.rows <- function (d) {
+     d <- d [, common.cols]
+     d <- d [, -1]
+     colnames (d)[1] <- gene.id.col
+     d <- process.duplicate.genes (d, genesym.col=1, data.cols=2:ncol(d), map.genes=FALSE,
+                                   policy='median')  # irrespective of global policy, median makes sense here
+     return (d)
+   }
+   pome <- adjust.columns.rows (pome)
+   mrna <- adjust.columns.rows (mrna)
+   
+   
+   data <- merge (pome, mrna, by=gene.id.col, suffixes=c ('.pome', '.mrna'))
+   
+   # data extends from start.col:end.col, with proteomics samples first, 
+   # followed by mrna samples
+   pome.cols <- grep ('\\.pome', colnames (data))
+   mrna.cols <- grep ('\\.mrna', colnames (data))
+   if ( length(pome.cols) != length(mrna.cols) ) stop (paste (type, 'and mRNA have different numbers of sample'))
+   
+   
+   ##
+   ## gene/protein correlation
+   ##
+   
+   correlations <- apply (data, 1,
+                          function (x) {
+                            tryCatch (cor.test (as.numeric (x[pome.cols]), as.numeric (x[mrna.cols]), 
+                                                method=correlation.type)$estimate,
+                                      error = function (e) NA)
+                          })
+   pvalues <- apply (data, 1,
+                     function (x) {
+                       tryCatch (cor.test (as.numeric (x[pome.cols]), as.numeric (x[mrna.cols]), 
+                                           method=correlation.type)$p.value,
+                                 error = function (e) NA)
+                     })
+   pvalues.fdr <- p.adjust (pvalues, method='fdr')
+   
+   data <- cbind (data, correlation=correlations, p.value=pvalues, p.value.fdr=pvalues.fdr)
+   write.table (data, paste (prefix, '-mrna-cor.tsv', sep=''), row.names=FALSE, sep='\t')
+   
+   
+   ## overall summary and histogram
+   s <- summary (correlations)
+   s.pos <- sum (correlations > 0, na.rm=TRUE) / length (correlations)
+   print (s, quote=FALSE)
+   print (table (correlations > 0), quote=FALSE)
+   print (paste ('Positive correlations:', round (s.pos*100, digits=2), '%'), quote=F)
+   
+   # pdf (paste (prefix, '-mrna-cor.pdf', sep=''), width=8, height=5)
+   q <- qplot (correlations, geom='histogram', binwidth=0.01, xlab=paste (type, '- mrna correlation'))
+   ggsave (paste (prefix, '-mrna-cor.pdf', sep=''), width=8, height=5)
+   # print (q)
+   # dev.off ()
+   
+   print (table (pvalues.fdr < FDR), quote=FALSE)
+   print (paste ('Significant correlations ( FDR <', FDR, '):',
+                 round (sum (pvalues.fdr < FDR, na.rm=T) / length(pvalues.fdr) * 100, digits=2), '%'), quote=F)
+   correlations.sig <- correlations [ pvalues.fdr < FDR ]
+   s.sig <- summary (correlations.sig)
+   s.sig.pos <- sum (correlations.sig > 0, na.rm=TRUE) / length (correlations.sig)
+   print (s.sig, quote=FALSE)
+   print (table (correlations.sig > 0), quote=FALSE)
+   print (paste ('Positive significant correlations:', round (s.sig.pos*100, digits=2), '%'), quote=F)
+   
+   # pdf (paste (prefix, '-mrna-cor-sig.pdf', sep=''), width=8, height=5)
+   q <- qplot (correlations.sig, geom='histogram', binwidth=0.01,
+               xlab=paste (type, '- mrna correlation\nFDR pvalue <', FDR))
+   ggsave (paste (prefix, '-mrna-cor-sig.pdf', sep=''), width=8, height=5)
+   # print (q)
+   # dev.off ()
+   
+   pdf (paste (prefix, '-mrna-cor-combined.pdf', sep=''), width=8, height=5)
+   hist (correlations, col='grey', breaks=200, xlab=paste (type, "- mrna correlation"), ylab='count')
+   hist (correlations.sig, col='red', breaks=200, add=TRUE)
+   legend (-0.5, 80, c ('all', 'significant'), fill=c('grey','red'), bty='n')
+   dev.off ()
+   
+   
+   ##
+   ## subsets
+   ##
+   
+   
+   # profile plots for significant subset
+   plot.profiles <- function (data.subset, pdf.file, size) {
+     cols.pome <- grep ('\\.pome', colnames (data.subset))
+     cols.mrna <- grep ('\\.mrna', colnames (data.subset))
+     d.pome <- data.subset [, cols.pome]
+     d.mrna <- data.subset [, cols.mrna]
+     rownames (d.pome) <- rownames (d.mrna) <- make.names (paste ('Gene:', data.subset[,1]), unique=TRUE)
+     
+     d.pome <- melt (t (d.pome))
+     d.mrna <- melt (t (d.mrna))
+     d.plot <- rbind (d.pome, d.mrna)
+     colnames (d.plot) <- c ('sample.type', 'gene.gi', 'intensity')
+     
+     get.sample.name <- function (x) {
+       y <- strsplit (toString(x), split='\\.')[[1]]
+       paste (y[1:(length(y)-1)], collapse='.')  # to handle replicate with .1 in name
+     }
+     
+     sample <- unlist (lapply (d.plot[,'sample.type'], get.sample.name))
+     type <- unlist (lapply (d.plot[,1],
+                             function (x) {
+                               y <- strsplit (toString(x), split='\\.')[[1]]
+                               y [length(y)]
+                             }))
+     d.plot <- cbind (d.plot, sample, type)
+     d.plot[,'sample'] <- factor (d.plot[,'sample'],          # to retain the ordering of samples in plots
+                                  levels= unlist (lapply (colnames (data.subset)[cols.pome], get.sample.name)))
+     
+     q <- ggplot (aes (x=sample, y=intensity, group=type, colour=type), data=d.plot) +
+           geom_line() + geom_point() + theme(axis.text.x=element_text (angle=90, vjust=0.5, size=9)) +
+           facet_wrap ( ~ gene.gi) 
+     
+     ggsave (pdf.file, width=size, height=size)
+   }
+   
+   
+   # best pairs (high correlation + significant p-value) -- plot top n if there are too many
+   select1 <- which ( abs (correlations) > 0.7 & pvalues.fdr < FDR )
+   data.subset1 <- data [select1, ]
+   data.subset1 <- data.subset1 [ order (data.subset1[,'correlation'], decreasing=TRUE), ]  # sort by correlation
+   write.table (data.subset1, paste (prefix, '-mrna-cor-best.tsv', sep=''), row.names=FALSE, sep='\t')
+   plot.profiles (data.subset1 [1:min (profile.plot.top.n, nrow(data.subset1)),], 
+                  paste (prefix, '-mrna-cor-best.pdf', sep=''), 40)
+   
+   
+   ##
+   ## sample-level correlation
+   ##
+   
+   sample.correlations <- sapply (1:length (pome.cols), 
+                                  function (i) {
+                                    tryCatch (cor.test (data[,pome.cols[i]], data[,mrna.cols[i]], method=correlation.type)$estimate,
+                                              error = function (e) NA)
+                                  })
+   pdf (paste (prefix, '-mrna-sample-cor.pdf', sep=''), width=8, height=5)
+   hist (sample.correlations, col='grey', xlab="sample-level protein-mrna correlation", ylab='count')
+   dev.off ()
+ }
> 
> 
> 
> ## call explore.correlations on the pome with and without bimodal samples
> pome.gct.file=file.path (norm.dir, paste (type, '-ratio-norm-nosdfilter-NAmax', na.max, '.gct', sep='')) 
> mrna.gct.file='rna-seq.gct' 
> group.cls=file.path (norm.dir, paste (type, '-Subgroup.cls', sep=''))
> explore.correlations (type, pome.gct.file, mrna.gct.file, group.cls)
Read 5 items
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
-0.6195  0.1203  0.3760  0.3411  0.5839  0.9157 

FALSE  TRUE 
 1497  8206 
[1] Positive correlations: 84.57 %

FALSE  TRUE 
 4546  5157 
[1] Significant correlations ( FDR < 0.05 ): 53.15 %
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
-0.6195  0.4635  0.5712  0.5638  0.6787  0.9157 

FALSE  TRUE 
   78  5079 
[1] Positive significant correlations: 98.49 %
null device 
          1 
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 143 rows containing missing values (geom_point). 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
 15.763   0.149  17.211 
